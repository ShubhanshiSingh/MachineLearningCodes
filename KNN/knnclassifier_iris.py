# -*- coding: utf-8 -*-
"""KNNClassifier-Iris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V5q-1SivEa6RHZZn5qgfxAxr0BGroZC7
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics

iris = pd.read_csv('/content/Iris.csv')

iris.head()

iris.info()

iris.drop(['Id'], axis= 1, inplace = True)
iris

lencoder = LabelEncoder()
colnam = ['Species']
iris[colnam] = iris[colnam].apply(lencoder.fit_transform)
iris

x = iris.iloc[:,:-1]
y = iris.iloc[:, -1]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.4)

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

range_k = range(1,15)
scores = {}
scores_list = []
for k in range_k:
  classifier = KNeighborsClassifier(n_neighbors= k)
  classifier.fit(x_train, y_train)
  y_pred = classifier.predict(x_test)
  scores[k] = metrics.accuracy_score(y_test, y_pred)
  scores_list.append(metrics.accuracy_score(y_test, y_pred))
result = metrics.confusion_matrix(y_test,y_pred)
print("confusion_matrix")
clas_nam = [0,1]
fig, ax = plt.subplots()
tick_mrks = np.arange(len(clas_nam))
plt.xticks(tick_mrks, clas_nam)
plt.yticks(tick_mrks, clas_nam)
sns.heatmap(pd.DataFrame(result), annot=True, cmap="YlGnBu", fmt = 'g')
ax.xaxis.set_label_position("top")
plt.tight_layout()
plt.title('Confusion Matrix', y = 1.1)
plt.ylabel('Actual Label')
plt.xlabel('Predicted Label')

#Classification Report
cr = metrics.classification_report(y_test,y_pred)
print(cr)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
plt.plot(range_k, scores_list)
plt.xlabel("Value of K")
plt.ylabel("Accuracy")

knn = KNeighborsClassifier(n_neighbors= 5)
knn.fit(x_train, y_train)
classes = {0:'Iris-setosa',1:'Iris-versicolor',2:'Iris-virginica'}
x_new = [[1,1,1,1],[4,3,1.3,0.2]]
y_predict = knn.predict(x_new)
print(classes[y_predict[0]])
print(classes[y_predict[1]])