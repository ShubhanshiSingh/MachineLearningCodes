# -*- coding: utf-8 -*-
"""Logistic R2 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JLlf3Nf3PBDpyPlw_lDzx5wqYxa59Vt9
"""

#Import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.model_selection import train_test_split

#Loading of dataset
data_df = pd.read_csv('/content/data.csv')
data_df.head()

data_df.drop(['id','Unnamed: 32'], axis= 1, inplace = True)
data_df.head()

data_df.info()

#Coorelation_matrix
corr_var = data_df.corr()
plt.figure(figsize=(20,20))
sns.heatmap(corr_var, annot=True, cmap = "BuPu")

dataset_cols = ['radius_mean','texture_mean','perimeter_mean','area_mean','smoothness_mean','compactness_mean'
                ,'concavity_mean','concave points_mean','symmetry_mean','fractal_dimension_mean','radius_se','texture_se','perimeter_se'
                ,'area_se','smoothness_se','compactness_se','concavity_se','concave points_se','symmetry_se','fractal_dimension_se'
                ,'radius_worst','texture_worst','perimeter_worst','area_worst','smoothness_worst','compactness_worst','concave points_worst','symmetry_worst','fractal_dimension_worst']
#features
x = data_df[dataset_cols]

#Target
y = data_df.diagnosis

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.4, random_state = 0)
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

classifier2 = LogisticRegression()
classifier2.fit(x_train, y_train)
y_pred2 = classifier2.predict(x_test)
print("y_pred:", y_pred2)

cm = metrics.confusion_matrix(y_test, y_pred2)
print(cm)

#visualization of confusion matrix
clas_nam = [0,1]
fig, ax = plt.subplots()
tick_mrks = np.arange(len(clas_nam))
plt.xticks(tick_mrks, clas_nam)
plt.yticks(tick_mrks, clas_nam)

#Heatmap
sns.heatmap(pd.DataFrame(cm), annot=True, cmap="YlGnBu", fmt = 'g')
ax.xaxis.set_label_position("top")
plt.tight_layout()
plt.title('Confusion Matrix', y = 1.1)
plt.ylabel('Actual Label')
plt.xlabel('Predicted Label')

#Confusion Matrix Evaluation
print("Accuracy:",metrics.accuracy_score(y_test, y_pred2)) 
print("Precision(B):",metrics.precision_score(y_test, y_pred2, average="binary", pos_label="B")) 
print("Precision(M):",metrics.precision_score(y_test, y_pred2, average="binary", pos_label="M")) 
print("Recall(B):",metrics.recall_score(y_test, y_pred2,average="binary", pos_label="B"))
print("Recall(M):",metrics.recall_score(y_test, y_pred2,average="binary", pos_label="M"))