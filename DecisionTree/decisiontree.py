# -*- coding: utf-8 -*-
"""DecisionTree

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QBCmKsOLoZPgWW-ZR3ABy_baeKYSmw86
"""

#Import important Libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Libraries for Encoding and transformation of data
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import classification_report, confusion_matrix

# Loading Data

dataset = sns.load_dataset('iris')
dataset.head()

# Dataset info

dataset.info()

dataset.shape

# Pair Plot to Visualise the attributes
sns.pairplot(data=dataset, hue = 'species')

# Correlation Matrix
sns.heatmap(dataset.corr())

"""Observations:
```
1: sepal_length is not related to sepal width
2: petal width highly correlated to petal length
```
"""

# Data splitting in x and y
x = dataset.iloc[:,:-1].values
y = dataset.iloc[:,-1].values

# Label Encoder to Encoding the categorical data
lEncode = LabelEncoder()
y = lEncode.fit_transform(y)
y

# Spliting the data into train and test data
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=22)

print('Training Data Split-', x_train.shape)
print('Testing Data Split-', x_test.shape)

# Defining Decision Tree
dTree = DecisionTreeClassifier()
dTree.fit(x_train,y_train)

"""Testing of Trained Model"""

# Predicting the values
y_pred = dTree.predict(x_test)

# Classification Report
print(classification_report(y_test,y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(5,5), edgecolor= "Black")

sns.heatmap(data = cm, annot= True, cmap = "Reds")
plt.ylabel('Actual')
plt.xlabel('Predicted')

all_sample_title = 'Accuracy Score: {0}'.format(dTree.score(x_test, y_test))
plt.title(all_sample_title, size = 15)

# Visualization of Graph

plt.figure(figsize=(10,10))
dec_tree = plot_tree(decision_tree=dTree, feature_names = dataset.columns, 
                     class_names =["setosa", "vercicolor", "verginica"] , filled = True , precision = 4, rounded = True)
plt.title("Decision Tree")